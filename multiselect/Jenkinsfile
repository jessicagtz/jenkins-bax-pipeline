properties([
    parameters([
        [$class: 'ChoiceParameter', 
            choiceType: 'PT_MULTI_SELECT', 
            description: 'Select the Env Name from the Dropdown List', 
            filterLength: 1, 
            filterable: false, 
            name: 'environment', 
            randomName: 'choice-parameter-5631314439613978', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Env\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return["Dev","Test","Prod"]'
                ]
            ]
        ], 
        [$class: 'CascadeChoiceParameter', 
            choiceType: 'PT_MULTI_SELECT', 
            description: 'Select the Server from the Dropdown List', 
            filterLength: 1, 
            filterable: false, 
            name: 'server', 
            randomName: 'choice-parameter-5631314456178619', 
            referencedParameters: 'environment', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Environment from Env Param\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        ''' if (environment.equals("Dev")){
                                return["Dev1","Dev2","Dev3"]
                            }
                            else if(environment.equals("Test")){
                                return["Test1","Test2","Test3"]
                            }
                            else if(environment.equals("Prod")){
                                return["Prod1","Prod2","Prod3"]
                            }
                        '''
                ]
            ]
        ],
        choice(name: 'script',
        choices: 'FileCopy',
        description: 'Select script:'),

        string(name: 'OriginPath', description: 'File you want to move:'),
        string(name: 'DestinationPath', description: 'Location to move file to:')
    ])
])

def String[] serverGroup = "${params.environment}".split(',');

pipeline {
    agent any
    // stages in build pipeline
    stages {
        //first stage
        stage ('Parameter Validation') {
        //steps in test stage
            steps {
                echo 'Checking environment input:'
                echo "Selected: ${params.environment}"
                echo 'Checking server input:'
                echo "Selected: ${params.server}"
                echo 'Checking script input'
                echo "Selected: ${params.script}"
                echo 'Checking username input:'
                echo "Selected: ${params.WindowsUser}"
                echo 'Checking password:'
                echo "Selected: ${params.WindowsPassword}"
            }
        }
        stage ('Execute Script') {
            steps {
                script {
                    for (x in serverGroup) { 
                        echo "$x \n"
                        echo "The script being executed next is ${params.script} in the ${params.environment} on the ${params.server} server."
                        node(label: "$x") {
                            git (
                                [url: 'https://github.com/tylersul/jenkins-bax.git', 
                                branch: 'master'])
                            script {
                                powershell(". '.\\CopyFile.ps1'")
                            }
                        } 
                    }
                }
            }
        }
    }
}
