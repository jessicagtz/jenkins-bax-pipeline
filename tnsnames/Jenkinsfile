properties([
    parameters([
        [$class: 'ChoiceParameter', 
            choiceType: 'PT_MULTI_SELECT', 
            description: 'Select the Env Name from the Dropdown List', 
            filterLength: 1, 
            filterable: false, 
            name: 'environment', 
            randomName: 'choice-parameter-5631314439613978', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Env\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return["Dev","Test","Prod"]'
                ]
            ]
        ], 
        [$class: 'CascadeChoiceParameter', 
            choiceType: 'PT_MULTI_SELECT', 
            description: 'Select the Server from the Dropdown List', 
            filterLength: 1, 
            filterable: false, 
            name: 'server', 
            randomName: 'choice-parameter-5631314456178619', 
            referencedParameters: 'environment', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Environment from Env Param\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        ''' if (environment.equals("Dev")){
                                return["Dev1","Dev2","Dev3"]
                            }
                            else if(environment.equals("Test")){
                                return["Test1","Test2","Test3"]
                            }
                            else if(environment.equals("Prod")){
                                return["Prod1","Prod2","Prod3"]
                            }
                        '''
                ]
            ]
        ],

        choice(name: 'script',
        choices: 'tnsnames',
        description: 'Select script:'),

        string(name: 'TargetPath', description: 'File(s) you want to review:'),
        string(name: 'ErrorCode', description: 'Error to search for:'),
        string(name: 'OutputSummary', description: 'Path to place review:')
    ])
])

def String[] serverGroup = "${params.environment}".split(',');

// Create the pipeline
pipeline {
    // Allows pipeline to be run on any available agent
    agent any
    // Stages in build pipeline
    stages {
        // First stage in pipeline: review inputs and output to Jenkins console
        stage ('Parameter Validation') {
        // Steps in Parameter Validation stage
            steps {
                // Output parameters selected at time of build to Jenkins console
                echo '---------------------------------------------------------'
                echo "Checking environment input... selected: ${params.environment}"
                echo "Checking server input(s)... selected: ${params.server}"
                echo "Checking script input... selected: ${params.script}"
                echo "Checking target input... selected: ${params.TargetPath}"
                echo "Checking error code input... selected: ${params.ErrorCode}"
                echo "Checking output summary input... selected: ${params.OutputSummary}"
                echo '---------------------------------------------------------'
            }
        }
        // Second stage in pipeline: download script and execute on in-scope servers
        stage ('Execute Script') {
            steps {
                script {
                    // For Loop to utilize the serverGroup array 
                    for (x in serverGroup) { 
                        // Output each server to console with line for spacing
                        echo "$x ---------------------------------------------------------\n"

                        echo "The script being executed next is ${params.script} in the ${params.environment} on the $x server."
                        // Where the script will be executed
                        node(label: "$x") {
                            // Checkout scripts from remote repo and download to Jenkins master 
                            git (
                                [url: 'https://github.com/tylersul/jenkins-bax.git', 
                                branch: 'master'])
                            // Execute script on servers
                            script {
                                //powershell(". '.\\SearchError.ps1'")
                                //powershell("dir")
                                powershell("Copy-Item -Path C:\\Jenkins\\workspace\\Cognos\\TNSNames-Change\\tnsnames.txt -Destination C:\\copy -Recurse")
                            }
                        } 
                    }
                }
            }
        }
    }
}



